<?php

/**
 * Implements hook_menu().
 */
function xlms_quiz_menu() {
  /**
   * These callbacks are largely for testing.
   */
  $items ['lms/return'] = array(
    'title' => 'Return URL for lms',
    'page callback' => 'xlms_quiz_quiz_simulator_finished',
    'page arguments' => array('result_id'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items ['lms/cleanup'] = array(
    'title' => 'Cleanup URL for lms',
    'page callback' => 'xlms_quiz_quiz_cleanup',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * @TODO:
 *  - Init a result record
 *  - Store the result answer. This gets stored in two places, in the
 *    question type specific table and in a global quiz_node_results_answers table.
 * @param $quiz
 */
function xlms_quiz_quiz_take_alter(&$quiz) {
  global $user;

  // For simulator driven quizes, we'll intercept normal behavior.
  $quiz_type = field_get_items('node', $quiz, 'quiz_type');
  if ($quiz_type[0]['value'] == 'simulator') {
    // Get all questions for quiz
    $questions = quiz_build_question_list($quiz);

    // Get or init the quiz session from $_SESSION
    if (!($rid = _quiz_active_result_id($user->uid, $quiz->nid, $quiz->vid))) {
      // If there is no active quiz result for the user's session, we'll start one.
      _quiz_take_quiz_init($quiz);
      $rid = _quiz_active_result_id($user->uid, $quiz->nid, $quiz->vid);
    }

    // Call function from xlms_session to handle Chrome app launch
    $redirect = array(
      'message' => t('<div style="margin-left: 2em"><h1 style="margin: 0 5px;">Launching' . $quiz->title .'</h1><br>After you\'ve completed the simulation your results will be scored by the simulator and your instructor.</div>'),
      'url' => 'node/' . $quiz->nid,
    );
    // xlms_session_launch($redirect);

    // Redirect to lesson start page with status message set
    // @TODO Make the redirection text configurable?
    drupal_set_message('<div style="margin-left: 20px"><h1 style="margin: 0 5px;">Launching ' . $quiz->title . '.</h1> <br>After you\'ve completed the simulation your results will be scored by the simulator and your instructor.</div>');
    drupal_goto('node/' . $quiz->nid);
  }
}

function xlms_quiz_get_result($result_id) {
  $result = db_select('quiz_node_results', 'qnr')
            ->condition('result_id', $result_id)
            ->fields('qnr');
  $return = $result->execute();
  $return = $return->fetchObject();

  return $return;
}

/**
 * Return config in json format for simulator questions in the requested quiz session.
 *
 * @param $session
 * @return string
 */
function xlms_quiz_quiz_simulator_config($session) {
  // Get result id for this session
  $result = xlms_quiz_get_result($session->result_id);

  // Load quiz for result/session
  $quiz = node_load($result->nid, $result->vid);
  // Get questions for quiz
  $questions = quiz_build_question_list($quiz);
  $types = _quiz_get_question_types();
  $config = array();

  foreach ($questions as $question) {
    $question = node_load($question['nid']);
    // Load configuration parameters for simulator questions
    if ($question->type == 'simulator_question') {
      $question_class = $types[$question->type]['question provider'];
      // Check for existing responses for this session to prevent fatal error.
      $QuestionClass = new $question_class($question);
      $config[] = $QuestionClass->getSimulationConfig();
    }
  }

  // return json
  $config_json = drupal_json_encode($config);
  return $config_json;
}

function xlms_quiz_quiz_simulator_finished($session = NULL) {
  // If $result_id isn't set, we'll try to get it from $session
  if (is_object($session) && isset($session->result_id)) {
    $result_id = $session->result_id;
  }
  elseif (!is_null($session)) {
    $result_id = $session;
  }
  else {
    drupal_set_message(t('Failed to get result id'));
    drupal_goto('/');
    return;
  }
  $session_data = array('result_id' => $result_id);

  $result = xlms_quiz_get_result($result_id);
  $user = user_load($result->uid);
  $quiz = node_load($result->nid);

  // Get questions for quiz
  $questions = quiz_build_question_list($quiz);
  $types = _quiz_get_question_types();

  // Iterate over questions and set results.
  foreach ($questions as $key => $question) {
    $question = node_load($question['nid']);
    $response_class = $types[$question->type]['response provider'];
    // Check for existing responses for this session to prevent fatal error.
    $QuestionResponse = new $response_class($result_id, $question);
    $answer = $QuestionResponse->getResponse();
    if (!isset($answer)) {
      if ($question->type == 'assessment_question') {
        $QuestionResponse->save();
      }
      elseif ($question->type == 'simulator_question') {
        // Fetch result from returned data
        // Set answer
        //  $QuestionResponse->answer = "0";
        $QuestionResponse->save();
      }
      else {

      }
      $module = $types[$question->type]['module'];
      $invoke_result = module_invoke($module, 'evaluate_question', $question, $result_id);
      $options = array();
      $options['question_data']['number'] = $key;
      // Set the result id for the question
      $question->rid = $result_id;
      quiz_store_question_result($quiz, $question, $options);
    }
  }

  // Placeholder to hit when the simulator returns.
  // - call quiz_quiz_finished()
  // - close result session, answers, etc.
  // - update answers for results returned from simulator
  // quiz_store_question_result($quiz, $question);
  // - set time stamp for completion
  // score quiz
  $questions = _quiz_get_answers($quiz, $result_id);
  $score = quiz_end_scoring($quiz, $result_id);
  if ($score['is_evaluated']) {
    _quiz_maintain_results($quiz, $result_id);
  }
  $score = quiz_end_actions($quiz, $score, $session_data);
  //@TODO Not sure what to do about this.
  //unset($_SESSION['quiz_' . $quiz->nid]);
  return "closed";
}

function xlms_quiz_quiz_cleanup() {
  // clean out current session.
  $rid = $_SESSION['quiz_10']['result_id'];
  unset($_SESSION['quiz_10']);
  db_query("delete from quiz_assessment_user_answers where result_id = %rid", array('rid' => $rid));
  db_query("delete from quiz_node_results_answers where result_id = %rid", array('rid' => $rid));

}

/**
 * Implements hook_theme_registry_alter().
 */
function xlms_quiz_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['quiz_report_form'])) {
    $module_path = drupal_get_path('module', 'xlms_quiz');
    $theme_registry['quiz_report_form']['theme path'] = $module_path;
    $theme_registry['quiz_report_form']['path'] = $module_path;
    $theme_registry['quiz_report_form']['template'] = 'quiz-report-form';
  }
}